=== Project ===
NAME: Charles Henick
CLASS: CSC171 FALL 2013
FILE NAMES: Rational.java, Complex.java, Test.java

This program creates two new types of numbers, rational and complex, with arithmetic functionality, as well as polar coordinate (for complex numbers) and compareTo (for rational numbers) functionality.

== Description ==
In defining appropriate classes, I created a Rational class to contain functions for rational numbers, a Complex class for complex numbers, and a Test class to test both the Rational and Complex classes given a range of inputs. Both types of numbers contain two primary attributes, which lent themselves to being private instance variables within their respective classes—-numerator and denominator for rational numbers, and real and imaginary parts for complex numbers. A constructor was created for each class, as well as accessors for each private instance variable. The toString methods for the Rational and Complex number classes differed significantly. For Rational numbers, toString ensures that a number with a numerator or denominator of 0 returns 0, and that the negative sign of a negative rational number appears before the numerator. For complex numbers, toString ensures that a real or imaginary part with value of 0 is not displayed.

The private instance variables can be called in dynamic methods inside their parent class, and the accessor methods can be called without any parameters using the dot method within their parent class as well. The primary usefulness of these functions will be exemplified within arithmetic functions as they are frequently called.

In designing addition and subtraction functions for rational numbers, common denominators were required to be found, most easily by multiplying the denominators by each other. This meant that the numerator must be either the sum (for addition) or difference (for subtraction) of each numerator multiplied by the other rational’s denominator. The multiplication function for rationals was fairly straightforward, as the numerator and denominator of the product is simply the product of both numerators and denominators, respectively. The division function was also simple, being simply the product of the first numerator and second denominator for the resulting numerator, and product of the first denominator and second numerator for the resulting denominator, in order to account for the reciprocal. Static and dynamic methods were created for each of these arithmetic functions using each the private instance variables defined above (for dynamic methods), or the accessor methods mentioned above (for static methods). For the equals function, the simplest form of this test is can be implemented using the cross product. The cross product tests the equality of two products, a numerator times a denominator and the other numerator times the other denominator. For the compareTo function, I decided to cast each rational number as a double, and then tested which rational number was greater (or less than). The equals function written above was called to test equality, rather than the “==“ operator, for fear of error due to long decimals.

For complex numbers, addition and subtraction was more straightforward, being able to to simply add or subtract real parts and imaginary parts separately using “+” and “-“ operators. For complex number multiplication, I wrote out on paper what happens when I foil out two complex numbers using variables, rather than numbers, and looked at the pattern. I was then able to substitute code for the variables, adjusting for the negative sign in the i^2 term. Similarly, I wrote down the result of complex number division on paper and substituted variables for private instance variables and accessor methods. To access polar coordinates, I used the pythagorean theorem (using the real and imaginary parts as legs of a triangle) to calculate the magnitude. To calculate angle, I looked up the equivalent of a tangent function in the Java doc online and used “atan2” Math function.

I initially created the Test class to try and match a given line of output sent out by the TA’s, and worked my way out given the specified 5-argument input. Each call to each arithmetic function follows the same syntax as the sample output code, nested within four for-loops. The four for-loops exist to provide a range of values for numerators and denominators for two rational numbers, and real and imaginary parts for two complex numbers. Four of these four-nested four loops exist, to accommodate the first argument input by the user which may request static or dynamic methods of rational or complex numbers. Therefore, four if-else statements exist, with nested for-loops within each one.

**This program can be run in Eclipse, where it was written, or in any other compiler of Java code. The main method can be called with 5 input arguments, as specified, where the first is a string and the rest are integers. The first argument indicates which nested for-loop should be run—-either complex static, complex dynamic, rational static, or rational dynamic.**

== Sources ==
Although I had learned arithmetic operations for rational and complex numbers throughout courses I have taken over the years, I used a number of sources to refresh my memory. I used www.mathisfun.com for rational numbers, and www.clarku.edu and www.mathportal.org for complex numbers. I also went through the Java doc online to search for helpful functions, and used Math.atan2() for polar angles, which I discovered there. I also found my lab TA’s (MW 12:30-1:45), as well as those from the TR 4:50-6:05 session, to be extremely helpful.
